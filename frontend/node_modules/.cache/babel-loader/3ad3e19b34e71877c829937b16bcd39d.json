{"ast":null,"code":"var _jsxFileName = \"/home/yussef/Desktop/current_project/Udacity_FullStack_Projects/02_trivia_api/frontend/src/components/QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getFirstQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/api/quizzes?category=' + this.state.quizCategory.id,\n        type: 'GET',\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      console.log(previousQuestions);\n      console.log(this.state.quizCategory.id);\n      $.ajax({\n        url: '/api/quizzes?category=' + //TODO: update request URL\n        this.state.quizCategory.id + '&prev_question=' + this.state.currentQuestion.id,\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: [],\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/api/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"ALL\"), this.state.categories.map(category => {\n      // console.log(category)\n      return React.createElement(\"div\", {\n        key: category.id,\n        value: category.id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: category.type,\n          id: category.id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, category.type);\n    } // {Object.keys(this.state.categories).map(id => {\n    // return (\n    //   <div\n    //     key={id}\n    //     value={id}\n    //     className=\"play-category\"\n    //     onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n    //     {this.state.categories[id]}\n    //   </div>\n    // )\n    // }\n    )));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["/home/yussef/Desktop/current_project/Udacity_FullStack_Projects/02_trivia_api/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","getFirstQuestion","previousQuestions","state","currentQuestion","push","ajax","url","success","result","showAnswer","question","guess","forceEnd","error","alert","console","log","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","map","category","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        categories: [],\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/api/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getFirstQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n    $.ajax({\n      url: '/api/quizzes?category=' + this.state.quizCategory.id,\n      type: 'GET',\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n    console.log(previousQuestions)\n    console.log(this.state.quizCategory.id)\n    $.ajax({\n      url: '/api/quizzes?category=' + //TODO: update request URL\n        this.state.quizCategory.id +\n        '&prev_question=' +\n        this.state.currentQuestion.id,\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {\n                  this.state.categories.map(category => {\n                    // console.log(category)\n                    return (\n                      <div\n                        key={category.id}\n                        value={category.id}\n                        className=\"play-category\"\n                        onClick={() => this.selectCategory({type:category.type, id:category.id})}\n                        >\n                        {category.type}\n                      </div>\n                    )}\n\n                  // {Object.keys(this.state.categories).map(id => {\n                  // return (\n                  //   <div\n                  //     key={id}\n                  //     value={id}\n                  //     className=\"play-category\"\n                  //     onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                  //     {this.state.categories[id]}\n                  //   </div>\n                  // )\n                // }\n              )}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}